server:
  port: 8080

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus
    jmx:
      exposure:
        include: "*"
  influx:
    metrics:
      export:
        db: spring-actuator
        enabled: true
        uri: http://localhost:8086
        auto-create-db: true
        consistency: one
        step: 5s

spring:
  application:
    name: concert-reservation
  profiles:
    active: local
  datasource:
    name: ConcertDataSource
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 20
      connection-timeout: 10000
      max-lifetime: 60000
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    open-in-view: false
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate.timezone.default_storage: NORMALIZE_UTC
      hibernate.jdbc.time_zone: UTC
queue:
  waiting-key: waiting-queues:waiting
  active-key: waiting-queues:active

  springdoc:
    packages-to-scan: com.server.concert_reservation
    default-consumes-media-type: application/json;charset=UTF-8
    default-produces-media-type: application/json;charset=UTF-8
    cache:
      disabled: true # 캐시 사용 여부
    api-docs:
      path: /api-docs/json
      groups:
        enabled: true
    swagger-ui:
      enabled: true # Swagger UI 사용여부 : 접근 경로 => <http://localhost:8080/swagger-ui/index.html>
      tags-sorter: alpha # 알파벳 순 태그 정렬, method: HTTP Method 순 정렬
      operations-sorter: alpha # 알파벳 순 태그 정렬, method: HTTP Method 순 정렬

---
spring.config.activate.on-profile: local, test

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/concert?characterEncoding=UTF-8&serverTimezone=UTC
    username: application
    password: application

  data:
    redis:
      host: localhost
      port: 6379
  logging:
    level:
      root: info

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      client-id: ${spring.application.name}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 5
    consumer:
      group-id: ${spring.application.name}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      properties:
        enable-auto-commit: false
    listener:
      ack-mode: manual